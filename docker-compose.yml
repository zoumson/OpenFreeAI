services:
  # --------------------
  # MySQL Database
  # --------------------
  mysql:
    image: mysql:8.0
    container_name: ${MYSQL_CONT}
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - '${MYSQL_PORT_EXT}:${MYSQL_PORT_INT}'
    volumes:
      - ./data/mysql_db:/var/lib/mysql
  # --------------------
  # Redis
  # --------------------
  redis:
    image: redis:7
    container_name: ${REDIS_CONT}
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
      - '--port'
      - '${REDIS_PORT}'
      - '--requirepass'
      - '${REDIS_PASSWORD}'
    volumes:
      - ./server/redis.conf:/usr/local/etc/redis/redis.conf
  # --------------------
  # Server (Flask + Gunicorn)
  # --------------------
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ${FLASK_CONT}
    env_file:
      - ./server/.env
    ports:
      - '${FLASK_PORT}:${FLASK_PORT}'
    depends_on:
      - mysql
      - redis
    volumes:
      - ./data:/app/data
    command:
      - dockerize
      - -wait
      - 'tcp://mysql:${MYSQL_PORT_INT}'
      - -wait
      - 'tcp://redis:${REDIS_PORT}'
      - -timeout
      - '60s'
      - gunicorn
      - -w
      - '${GUNICORN_WORKERS}'
      - -b
      - '${FLASK_HOST}:${FLASK_PORT}'
      - '${GUNICORN_APP}'

  # --------------------
  # Celery Worker
  # --------------------
  celery_worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: ${CELERY_CONT}
    env_file:
      - ./server/.env
    depends_on:
      - redis
      - server
    volumes:
      - ./data:/app/data
    command:
      - dockerize
      - -wait
      - 'tcp://mysql:${MYSQL_PORT_INT}'
      - -wait
      - 'tcp://redis:${REDIS_PORT}'
      - -timeout
      - '60s'
      - celery
      - -A
      - '${CELERY_APP}'
      - worker
      - --loglevel=info
      - --autoscale=${CELERY_AUTOSCALE}

  # --------------------
  # Client UI (Gradio)
  # --------------------
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: ${UI_CONT}
    env_file:
      - ./client/.env
    ports:
      - '${UI_PORT}:${UI_PORT}'
    # depends_on:
    #   - server
    volumes:
      - ./client:/app/client
    command: python ui_client.py
